// Code generated by protoc-gen-go.
// source: raft.proto
// DO NOT EDIT!

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	raft.proto

It has these top-level messages:
	LogEntry
	AppendEntriesRequest
	AppendEntriesResponse
	RequestVoteRequest
	RequestVoteResponse
	SnapshotRecoveryRequest
	SnapshotRecoveryResponse
	SnapshotRequest
	SnapshotResponse
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogEntry struct {
	Index       uint64 `protobuf:"varint,1,opt,name=Index" json:"Index,omitempty"`
	Term        uint64 `protobuf:"varint,2,opt,name=Term" json:"Term,omitempty"`
	CommandName string `protobuf:"bytes,3,opt,name=CommandName" json:"CommandName,omitempty"`
	Command     []byte `protobuf:"bytes,4,opt,name=Command,proto3" json:"Command,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LogEntry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LogEntry) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *LogEntry) GetCommandName() string {
	if m != nil {
		return m.CommandName
	}
	return ""
}

func (m *LogEntry) GetCommand() []byte {
	if m != nil {
		return m.Command
	}
	return nil
}

type AppendEntriesRequest struct {
	Term         uint64      `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	PrevLogIndex uint64      `protobuf:"varint,2,opt,name=PrevLogIndex" json:"PrevLogIndex,omitempty"`
	PrevLogTerm  uint64      `protobuf:"varint,3,opt,name=PrevLogTerm" json:"PrevLogTerm,omitempty"`
	CommitIndex  uint64      `protobuf:"varint,4,opt,name=CommitIndex" json:"CommitIndex,omitempty"`
	LeaderName   string      `protobuf:"bytes,5,opt,name=LeaderName" json:"LeaderName,omitempty"`
	Entries      []*LogEntry `protobuf:"bytes,6,rep,name=Entries" json:"Entries,omitempty"`
}

func (m *AppendEntriesRequest) Reset()                    { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()               {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AppendEntriesRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogIndex() uint64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogTerm() uint64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesRequest) GetCommitIndex() uint64 {
	if m != nil {
		return m.CommitIndex
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeaderName() string {
	if m != nil {
		return m.LeaderName
	}
	return ""
}

func (m *AppendEntriesRequest) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AppendEntriesResponse struct {
	Term        uint64 `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	Index       uint64 `protobuf:"varint,2,opt,name=Index" json:"Index,omitempty"`
	CommitIndex uint64 `protobuf:"varint,3,opt,name=CommitIndex" json:"CommitIndex,omitempty"`
	Success     bool   `protobuf:"varint,4,opt,name=Success" json:"Success,omitempty"`
}

func (m *AppendEntriesResponse) Reset()                    { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()               {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AppendEntriesResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesResponse) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *AppendEntriesResponse) GetCommitIndex() uint64 {
	if m != nil {
		return m.CommitIndex
	}
	return 0
}

func (m *AppendEntriesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RequestVoteRequest struct {
	Term          uint64 `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	LastLogIndex  uint64 `protobuf:"varint,2,opt,name=LastLogIndex" json:"LastLogIndex,omitempty"`
	LastLogTerm   uint64 `protobuf:"varint,3,opt,name=LastLogTerm" json:"LastLogTerm,omitempty"`
	CandidateName string `protobuf:"bytes,4,opt,name=CandidateName" json:"CandidateName,omitempty"`
}

func (m *RequestVoteRequest) Reset()                    { *m = RequestVoteRequest{} }
func (m *RequestVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteRequest) ProtoMessage()               {}
func (*RequestVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RequestVoteRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteRequest) GetLastLogIndex() uint64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *RequestVoteRequest) GetLastLogTerm() uint64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

func (m *RequestVoteRequest) GetCandidateName() string {
	if m != nil {
		return m.CandidateName
	}
	return ""
}

type RequestVoteResponse struct {
	Term        uint64 `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	VoteGranted bool   `protobuf:"varint,2,opt,name=VoteGranted" json:"VoteGranted,omitempty"`
}

func (m *RequestVoteResponse) Reset()                    { *m = RequestVoteResponse{} }
func (m *RequestVoteResponse) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteResponse) ProtoMessage()               {}
func (*RequestVoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RequestVoteResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteResponse) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

type SnapshotRecoveryRequest struct {
	LeaderName string                          `protobuf:"bytes,1,opt,name=LeaderName" json:"LeaderName,omitempty"`
	LastIndex  uint64                          `protobuf:"varint,2,opt,name=LastIndex" json:"LastIndex,omitempty"`
	LastTerm   uint64                          `protobuf:"varint,3,opt,name=LastTerm" json:"LastTerm,omitempty"`
	Peers      []*SnapshotRecoveryRequest_Peer `protobuf:"bytes,4,rep,name=Peers" json:"Peers,omitempty"`
	State      []byte                          `protobuf:"bytes,5,opt,name=State,proto3" json:"State,omitempty"`
}

func (m *SnapshotRecoveryRequest) Reset()                    { *m = SnapshotRecoveryRequest{} }
func (m *SnapshotRecoveryRequest) String() string            { return proto.CompactTextString(m) }
func (*SnapshotRecoveryRequest) ProtoMessage()               {}
func (*SnapshotRecoveryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SnapshotRecoveryRequest) GetLeaderName() string {
	if m != nil {
		return m.LeaderName
	}
	return ""
}

func (m *SnapshotRecoveryRequest) GetLastIndex() uint64 {
	if m != nil {
		return m.LastIndex
	}
	return 0
}

func (m *SnapshotRecoveryRequest) GetLastTerm() uint64 {
	if m != nil {
		return m.LastTerm
	}
	return 0
}

func (m *SnapshotRecoveryRequest) GetPeers() []*SnapshotRecoveryRequest_Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *SnapshotRecoveryRequest) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

type SnapshotRecoveryRequest_Peer struct {
	Name             string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	ConnectionString string `protobuf:"bytes,2,opt,name=ConnectionString" json:"ConnectionString,omitempty"`
}

func (m *SnapshotRecoveryRequest_Peer) Reset()                    { *m = SnapshotRecoveryRequest_Peer{} }
func (m *SnapshotRecoveryRequest_Peer) String() string            { return proto.CompactTextString(m) }
func (*SnapshotRecoveryRequest_Peer) ProtoMessage()               {}
func (*SnapshotRecoveryRequest_Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

func (m *SnapshotRecoveryRequest_Peer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SnapshotRecoveryRequest_Peer) GetConnectionString() string {
	if m != nil {
		return m.ConnectionString
	}
	return ""
}

type SnapshotRecoveryResponse struct {
	Term        uint64 `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	Success     bool   `protobuf:"varint,2,opt,name=Success" json:"Success,omitempty"`
	CommitIndex uint64 `protobuf:"varint,3,opt,name=CommitIndex" json:"CommitIndex,omitempty"`
}

func (m *SnapshotRecoveryResponse) Reset()                    { *m = SnapshotRecoveryResponse{} }
func (m *SnapshotRecoveryResponse) String() string            { return proto.CompactTextString(m) }
func (*SnapshotRecoveryResponse) ProtoMessage()               {}
func (*SnapshotRecoveryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SnapshotRecoveryResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *SnapshotRecoveryResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *SnapshotRecoveryResponse) GetCommitIndex() uint64 {
	if m != nil {
		return m.CommitIndex
	}
	return 0
}

type SnapshotRequest struct {
	LeaderName string `protobuf:"bytes,1,opt,name=LeaderName" json:"LeaderName,omitempty"`
	LastIndex  uint64 `protobuf:"varint,2,opt,name=LastIndex" json:"LastIndex,omitempty"`
	LastTerm   uint64 `protobuf:"varint,3,opt,name=LastTerm" json:"LastTerm,omitempty"`
}

func (m *SnapshotRequest) Reset()                    { *m = SnapshotRequest{} }
func (m *SnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*SnapshotRequest) ProtoMessage()               {}
func (*SnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SnapshotRequest) GetLeaderName() string {
	if m != nil {
		return m.LeaderName
	}
	return ""
}

func (m *SnapshotRequest) GetLastIndex() uint64 {
	if m != nil {
		return m.LastIndex
	}
	return 0
}

func (m *SnapshotRequest) GetLastTerm() uint64 {
	if m != nil {
		return m.LastTerm
	}
	return 0
}

type SnapshotResponse struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *SnapshotResponse) Reset()                    { *m = SnapshotResponse{} }
func (m *SnapshotResponse) String() string            { return proto.CompactTextString(m) }
func (*SnapshotResponse) ProtoMessage()               {}
func (*SnapshotResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SnapshotResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*LogEntry)(nil), "protobuf.LogEntry")
	proto.RegisterType((*AppendEntriesRequest)(nil), "protobuf.AppendEntriesRequest")
	proto.RegisterType((*AppendEntriesResponse)(nil), "protobuf.AppendEntriesResponse")
	proto.RegisterType((*RequestVoteRequest)(nil), "protobuf.RequestVoteRequest")
	proto.RegisterType((*RequestVoteResponse)(nil), "protobuf.RequestVoteResponse")
	proto.RegisterType((*SnapshotRecoveryRequest)(nil), "protobuf.SnapshotRecoveryRequest")
	proto.RegisterType((*SnapshotRecoveryRequest_Peer)(nil), "protobuf.SnapshotRecoveryRequest.Peer")
	proto.RegisterType((*SnapshotRecoveryResponse)(nil), "protobuf.SnapshotRecoveryResponse")
	proto.RegisterType((*SnapshotRequest)(nil), "protobuf.SnapshotRequest")
	proto.RegisterType((*SnapshotResponse)(nil), "protobuf.SnapshotResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Raft service

type RaftClient interface {
	SendVoteRequest(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
	SendAppendEntriesRequest(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
	SendSnapshotRequest(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error)
	SendSnapshotRecoveryRequest(ctx context.Context, in *SnapshotRecoveryRequest, opts ...grpc.CallOption) (*SnapshotRecoveryResponse, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) SendVoteRequest(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := grpc.Invoke(ctx, "/protobuf.Raft/SendVoteRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) SendAppendEntriesRequest(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := grpc.Invoke(ctx, "/protobuf.Raft/SendAppendEntriesRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) SendSnapshotRequest(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error) {
	out := new(SnapshotResponse)
	err := grpc.Invoke(ctx, "/protobuf.Raft/SendSnapshotRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) SendSnapshotRecoveryRequest(ctx context.Context, in *SnapshotRecoveryRequest, opts ...grpc.CallOption) (*SnapshotRecoveryResponse, error) {
	out := new(SnapshotRecoveryResponse)
	err := grpc.Invoke(ctx, "/protobuf.Raft/SendSnapshotRecoveryRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Raft service

type RaftServer interface {
	SendVoteRequest(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
	SendAppendEntriesRequest(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
	SendSnapshotRequest(context.Context, *SnapshotRequest) (*SnapshotResponse, error)
	SendSnapshotRecoveryRequest(context.Context, *SnapshotRecoveryRequest) (*SnapshotRecoveryResponse, error)
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_SendVoteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).SendVoteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Raft/SendVoteRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).SendVoteRequest(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_SendAppendEntriesRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).SendAppendEntriesRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Raft/SendAppendEntriesRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).SendAppendEntriesRequest(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_SendSnapshotRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).SendSnapshotRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Raft/SendSnapshotRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).SendSnapshotRequest(ctx, req.(*SnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_SendSnapshotRecoveryRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRecoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).SendSnapshotRecoveryRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Raft/SendSnapshotRecoveryRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).SendSnapshotRecoveryRequest(ctx, req.(*SnapshotRecoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendVoteRequest",
			Handler:    _Raft_SendVoteRequest_Handler,
		},
		{
			MethodName: "SendAppendEntriesRequest",
			Handler:    _Raft_SendAppendEntriesRequest_Handler,
		},
		{
			MethodName: "SendSnapshotRequest",
			Handler:    _Raft_SendSnapshotRequest_Handler,
		},
		{
			MethodName: "SendSnapshotRecoveryRequest",
			Handler:    _Raft_SendSnapshotRecoveryRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x54, 0xcf, 0x8e, 0xd3, 0x3e,
	0x10, 0xfe, 0xa5, 0x4d, 0xb7, 0xed, 0xb4, 0x3f, 0xed, 0xca, 0xbb, 0x88, 0x10, 0x96, 0x25, 0x58,
	0x08, 0x55, 0x68, 0xd5, 0xc3, 0x72, 0xe5, 0x82, 0x2a, 0x40, 0x88, 0x6a, 0x55, 0xb9, 0x88, 0x1b,
	0x07, 0x6f, 0x33, 0x2d, 0x05, 0xd5, 0x0e, 0x89, 0xbb, 0x62, 0x0f, 0x3c, 0x03, 0x17, 0x1e, 0x90,
	0x37, 0xe0, 0x15, 0x90, 0xed, 0xa4, 0x71, 0xfa, 0xf7, 0xc4, 0xa9, 0x99, 0x6f, 0xc6, 0x33, 0xdf,
	0xf7, 0x79, 0x5c, 0x80, 0x94, 0x4f, 0x55, 0x3f, 0x49, 0xa5, 0x92, 0xa4, 0x65, 0x7e, 0x6e, 0x96,
	0x53, 0x9a, 0x40, 0x6b, 0x28, 0x67, 0xaf, 0x85, 0x4a, 0xef, 0xc8, 0x19, 0x34, 0xde, 0x89, 0x18,
	0xbf, 0x07, 0x5e, 0xe4, 0xf5, 0x7c, 0x66, 0x03, 0x42, 0xc0, 0xff, 0x80, 0xe9, 0x22, 0xa8, 0x19,
	0xd0, 0x7c, 0x93, 0x08, 0x3a, 0x03, 0xb9, 0x58, 0x70, 0x11, 0x5f, 0xf3, 0x05, 0x06, 0xf5, 0xc8,
	0xeb, 0xb5, 0x99, 0x0b, 0x91, 0x00, 0x9a, 0x79, 0x18, 0xf8, 0x91, 0xd7, 0xeb, 0xb2, 0x22, 0xa4,
	0xbf, 0x3d, 0x38, 0x7b, 0x95, 0x24, 0x28, 0x62, 0x3d, 0x75, 0x8e, 0x19, 0xc3, 0x6f, 0x4b, 0xcc,
	0xd4, 0x6a, 0x90, 0xe7, 0x0c, 0xa2, 0xd0, 0x1d, 0xa5, 0x78, 0x3b, 0x94, 0x33, 0xcb, 0xcc, 0x92,
	0xa8, 0x60, 0x9a, 0x4c, 0x1e, 0x9b, 0xe3, 0x75, 0x53, 0xe2, 0x42, 0x05, 0xdd, 0xb9, 0xb2, 0x4d,
	0x7c, 0x5b, 0xe1, 0x40, 0xe4, 0x02, 0x60, 0x88, 0x3c, 0xc6, 0xd4, 0xe8, 0x69, 0x18, 0x3d, 0x0e,
	0x42, 0x2e, 0xa1, 0x99, 0xb3, 0x0d, 0x8e, 0xa2, 0x7a, 0xaf, 0x73, 0x45, 0xfa, 0x85, 0x85, 0xfd,
	0xc2, 0x3f, 0x56, 0x94, 0xd0, 0x1f, 0x70, 0x6f, 0x4d, 0x61, 0x96, 0x48, 0x91, 0xe1, 0x56, 0x89,
	0x2b, 0xd7, 0x6b, 0xae, 0xeb, 0x6b, 0x94, 0xeb, 0x9b, 0x94, 0x03, 0x68, 0x8e, 0x97, 0x93, 0x09,
	0x66, 0x99, 0x11, 0xd4, 0x62, 0x45, 0x48, 0x7f, 0x79, 0x40, 0x72, 0x53, 0x3f, 0x4a, 0x85, 0x07,
	0xfc, 0x1d, 0xf2, 0x4c, 0xad, 0xfb, 0xeb, 0x62, 0x9a, 0x4a, 0x1e, 0xbb, 0xfe, 0x3a, 0x10, 0x79,
	0x0a, 0xff, 0x0f, 0xb8, 0x88, 0xe7, 0x31, 0x57, 0x68, 0x0c, 0xf4, 0x8d, 0x81, 0x55, 0x90, 0xbe,
	0x87, 0xd3, 0x0a, 0xab, 0x3d, 0x9e, 0x44, 0xd0, 0xd1, 0x35, 0x6f, 0x53, 0x2e, 0x14, 0xc6, 0x86,
	0x55, 0x8b, 0xb9, 0x10, 0xfd, 0x59, 0x83, 0xfb, 0x63, 0xc1, 0x93, 0xec, 0xb3, 0x54, 0x0c, 0x27,
	0xf2, 0x16, 0xd3, 0xbb, 0x42, 0x68, 0xf5, 0x32, 0xbd, 0x8d, 0xcb, 0x3c, 0x87, 0xb6, 0x66, 0xef,
	0x2a, 0x2e, 0x01, 0x12, 0x42, 0x4b, 0x07, 0x8e, 0xd6, 0x55, 0x4c, 0x5e, 0x42, 0x63, 0x84, 0x98,
	0x6a, 0xc7, 0xf5, 0x12, 0x3c, 0x2b, 0x97, 0x60, 0x07, 0x97, 0xbe, 0x2e, 0x67, 0xf6, 0x90, 0xbe,
	0xe9, 0xb1, 0xe2, 0xca, 0xee, 0x57, 0x97, 0xd9, 0x20, 0x7c, 0x03, 0xbe, 0x4e, 0x6b, 0x1f, 0x1c,
	0xbe, 0xe6, 0x9b, 0x3c, 0x87, 0x93, 0x81, 0x14, 0x02, 0x27, 0x6a, 0x2e, 0xc5, 0x58, 0xa5, 0x73,
	0x31, 0x33, 0x84, 0xdb, 0x6c, 0x03, 0xa7, 0x5f, 0x20, 0xd8, 0x24, 0xb1, 0xc7, 0x63, 0x67, 0x7f,
	0x6a, 0x95, 0xfd, 0x39, 0xbc, 0x7b, 0xf4, 0x2b, 0x1c, 0x97, 0xb3, 0xfe, 0xb1, 0xe9, 0xf4, 0x12,
	0x4e, 0xca, 0x61, 0xb9, 0x20, 0x87, 0xbc, 0x57, 0x21, 0x7f, 0xf5, 0xa7, 0x06, 0x3e, 0xe3, 0x53,
	0x45, 0x46, 0x70, 0x3c, 0x46, 0x11, 0xbb, 0x2f, 0xe0, 0xbc, 0xbc, 0xaf, 0xcd, 0xf7, 0x11, 0x3e,
	0xda, 0x91, 0xb5, 0x23, 0xe9, 0x7f, 0xe4, 0x13, 0x04, 0xba, 0xe3, 0xd6, 0x3f, 0xaf, 0x8b, 0xf2,
	0xf0, 0xb6, 0x7c, 0xf8, 0x78, 0x67, 0x7e, 0xd5, 0xfe, 0x1a, 0x4e, 0x75, 0xfb, 0x75, 0x63, 0x1f,
	0x6c, 0x5b, 0x32, 0xdb, 0x34, 0xdc, 0x96, 0x5a, 0xf5, 0x9b, 0xc2, 0xc3, 0x6a, 0xbf, 0xea, 0x2b,
	0x79, 0x72, 0x70, 0x79, 0x43, 0xba, 0xaf, 0xa4, 0x98, 0x73, 0x73, 0x64, 0x8a, 0x5e, 0xfc, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0xb1, 0xd1, 0xf5, 0xbb, 0x61, 0x06, 0x00, 0x00,
}
